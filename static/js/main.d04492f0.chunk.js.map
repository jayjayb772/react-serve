{"version":3,"sources":["main/components/CtaBox/train/Train.js","main/components/CtaBox/CtaBox.js","app/App.js","main/util/serviceWorker.js","index.js"],"names":["Bounce","styled","div","keyframes","bounceInLeft","Train","trainInfo","console","log","className","style","backgroundColor","colorHex","color","dest","substring","eta","CtaBox","useState","trains","setTrains","error","setError","isLoaded","setIsLoaded","useEffect","doStuff","a","process","fetch","then","res","json","data","ex","undefined","push","interval","setInterval","clearInterval","map","t","key","arrTime","App","middle","center","around","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"+YAMA,IAAMA,EAASC,IAAOC,IAAV,IAA8BC,YAA9B,IAA0CC,iBAqBvCC,MAnBf,SAAeC,GAGX,OAFAC,QAAQC,IAAI,SACZD,QAAQC,IAAIF,GAER,kBAACN,EAAD,KAEI,yBAAKS,UAAU,aAAaC,MAAO,CAACC,gBAAgBL,EAAUA,UAAUM,WACnEN,EAAUA,UAAUO,MADzB,cAEI,yBAAKJ,UAAU,QACVH,EAAUA,UAAUQ,KAAKC,UAAU,KAExC,yBAAKN,UAAU,OACVH,EAAUA,UAAUU,QC6C1BC,MA7Df,WAAmB,IAAD,EACcC,mBAAS,IADvB,mBACPC,EADO,KACCC,EADD,OAEYF,mBAAS,IAFrB,mBAEPG,EAFO,KAEAC,EAFA,OAGkBJ,oBAAS,GAH3B,mBAGPK,EAHO,KAGGC,EAHH,KA0Cd,OAtCAC,qBAAU,WACN,SAASC,IACL,IAAIC,EAAC,UAAMC,kDAAN,oBACLC,MAAMF,GACDG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF1B,QAAQC,IAAI,QACZD,QAAQC,IAAIyB,GACZ,IAAIC,EAAK,QACeC,IAApBF,EAAK,WACLX,EAAS,kBAETY,EAAGE,KAAKH,EAAK,iBACWE,IAApBF,EAAK,YACLC,EAAGE,KAAKH,EAAK,iBAEOE,IAApBF,EAAK,YACLC,EAAGE,KAAKH,EAAK,iBAEOE,IAApBF,EAAK,YACLC,EAAGE,KAAKH,EAAK,YAEjBb,EAAUc,GACVV,GAAY,OAI5BE,IACA,IAAMW,EAAWC,aAAY,WACzBhB,EAAS,IACTF,EAAU,IACVI,GAAY,GACZE,IACAnB,QAAQC,IAAI,iCACb,KACH,OAAO,kBAAM+B,cAAcF,MAE5B,IACW,KAAVhB,EACO,yBAAKZ,UAAU,SAASY,GAE1BE,EAIG,6BACKhB,QAAQC,IAAI,UACZW,EAAOqB,KAAI,SAAAC,GAAC,OACT,kBAAC,EAAD,CAAOC,IAAKD,EAAEE,QAASrC,UAAWmC,QANvC,4CChBJG,MA3Bf,WAEI,OACI,yBAAKnC,UAAU,OACX,yBAAKA,UAAU,WACX,kBAAC,MAAD,CAAKoC,OAAO,KAAKC,OAAO,KAAKC,OAAO,KAAKtC,UAAU,UAC/C,kBAAC,MAAD,CAAKuC,GARf,EAQwBvC,UAAU,iBAAxB,eAEI,kBAAC,EAAD,OAEJ,kBAAC,MAAD,CAAKuC,GAZf,EAYwBvC,UAAU,kBAAxB,UAIJ,kBAAC,MAAD,CAAKoC,OAAO,KAAKC,OAAO,KAAKC,OAAO,KAAKtC,UAAU,aAC/C,kBAAC,MAAD,CAAKuC,GAjBf,EAiBwBvC,UAAU,iBAAxB,SAGA,kBAAC,MAAD,CAAKuC,GApBf,EAoBwBvC,UAAU,kBAAxB,aCbAwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACLd,QAAQc,MAAMA,EAAM4C,a","file":"static/js/main.d04492f0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Train.css';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport {bounceInLeft, bounceOutRight} from \"react-animations\"\r\nimport ScrollAnimation from 'react-animate-on-scroll';;\r\n\r\nconst Bounce = styled.div`animation: 4s ${keyframes`${bounceInLeft}`} ease-in`;\r\n\r\nfunction Train(trainInfo){\r\n    console.log(\"HELLO\")\r\n    console.log(trainInfo)\r\n    return (\r\n        <Bounce>\r\n\r\n            <div className=\"train-line\" style={{backgroundColor:trainInfo.trainInfo.colorHex}}>\r\n                {trainInfo.trainInfo.color} Line Train\r\n                <div className=\"dest\">\r\n                    {trainInfo.trainInfo.dest.substring(15)}\r\n                </div>\r\n                <div className=\"eta\">\r\n                    {trainInfo.trainInfo.eta}\r\n                </div>\r\n            </div>\r\n        </Bounce>\r\n    )\r\n}\r\n\r\nexport default Train;","import React, {useEffect, useState} from \"react\";\r\nimport Train from \"./train/Train\";\r\n\r\n\r\nfunction CtaBox() {\r\n    const [trains, setTrains] = useState([])\r\n    const [error, setError] = useState(\"\");\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    useEffect(() => {\r\n        function doStuff() {\r\n            let a = `${process.env.REACT_APP_ORCHURL}/cta/train-times`\r\n            fetch(a)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    console.log(\"here\")\r\n                    console.log(data)\r\n                    let ex = []\r\n                    if (data[\"Train 1\"] === undefined) {\r\n                        setError(\"No trains now\")\r\n                    } else {\r\n                        ex.push(data[\"Train 1\"]);\r\n                        if (data[\"Train 2\"] !== undefined) {\r\n                            ex.push(data[\"Train 2\"]);\r\n                        }\r\n                        if (data[\"Train 3\"] !== undefined) {\r\n                            ex.push(data[\"Train 3\"]);\r\n                        }\r\n                        if (data[\"Train 4\"] !== undefined) {\r\n                            ex.push(data[\"Train 4\"]);\r\n                        }\r\n                        setTrains(ex);\r\n                        setIsLoaded(true)\r\n                    }\r\n                })\r\n        };\r\n        doStuff();\r\n        const interval = setInterval(() => {\r\n            setError(\"\")\r\n            setTrains([]);\r\n            setIsLoaded(false)\r\n            doStuff();\r\n            console.log('This will run every minute!');\r\n        }, 60000);\r\n        return () => clearInterval(interval);\r\n\r\n    }, [])\r\n    if (error !== \"\") {\r\n        return <div className=\"Error\">{error}</div>\r\n    } else {\r\n        if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    {console.log(\"IN DIV\")}\r\n                    {trains.map(t => (\r\n                        <Train key={t.arrTime} trainInfo={t}/>\r\n                    ))}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default CtaBox;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Col, Row} from \"react-flexbox-grid\";\r\nimport CtaBox from \"../main/components/CtaBox/CtaBox\";\r\nimport { bounceInRight } from 'react-animations'\r\nlet num = 5\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"MainBox\">\r\n                <Row middle=\"xs\" center=\"xs\" around=\"xs\" className=\"TopBox\">\r\n                    <Col xs={num} className=\"quadrant-left\" >\r\n                        Train Times!\r\n                        <CtaBox/>\r\n                    </Col>\r\n                    <Col xs={num} className=\"quadrant-right\">\r\n                        Box 2\r\n                    </Col>\r\n                </Row>\r\n                <Row middle=\"xs\" center=\"xs\" around=\"xs\" className=\"BottomBox\">\r\n                    <Col xs={num} className=\"quadrant-left\">\r\n                        Box 3\r\n                    </Col>\r\n                    <Col xs={num} className=\"quadrant-right\">\r\n                        Box 4\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './main/util/serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}